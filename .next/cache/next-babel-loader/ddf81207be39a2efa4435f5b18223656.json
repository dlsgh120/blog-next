{"ast":null,"code":"var _class, _descriptor, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { observable } from 'mobx';\nlet TestStore = (_class = (_temp = class TestStore {\n  constructor() {\n    _initializerDefineProperty(this, \"test\", _descriptor, this);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"test\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 'mobx teststore';\n  }\n})), _class);\nexport default TestStore;","map":{"version":3,"sources":["D:/workspace/blog/stores/test/testStore.ts"],"names":["observable","TestStore"],"mappings":";;;;;;;;AAAA,SAASA,UAAT,QAA2B,MAA3B;IAGMC,S,sBAAN,MAAMA,SAAN,CAAgB;AAAA;AAAA;AAAA;;AAAA,C,8EACdD,U;;;;;WAA0B,gB;;;AAG5B,eAAeC,SAAf","sourcesContent":["import { observable } from 'mobx';\r\nimport client from '../../lib/client';\r\n\r\nclass TestStore {\r\n\t@observable test: string = 'mobx teststore';\r\n}\r\n\r\nexport default TestStore;\r\n"]},"metadata":{},"sourceType":"module"}
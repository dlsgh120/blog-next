{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nimport { observable, action } from 'mobx';\nimport client from '../../lib/client';\nvar TestStore = (_class = (_temp = function TestStore() {\n  _classCallCheck(this, TestStore);\n\n  _initializerDefineProperty(this, \"test\", _descriptor, this);\n\n  _initializerDefineProperty(this, \"apiData\", _descriptor2, this);\n\n  _initializerDefineProperty(this, \"getApiData\", _descriptor3, this);\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"test\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 'mobx teststore';\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"apiData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"getApiData\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this = this;\n\n    return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return client.get('/user');\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.data;\n\n            case 5:\n              _this.apiData = _context.sent;\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  }\n})), _class);\nexport default TestStore;\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["D:/workspace/blog/stores/test/testStore.ts"],"names":["TestStore","observable","action","res","client"],"mappings":";;;;;;;;AAAA,SAAA,UAAA,EAAA,MAAA,QAAA,MAAA;AACA,OAAA,MAAA,MAAA,kBAAA;IAEMA,S;;;;;;;;+EACJC,U;;;;;WAA0B,gB;;2EAC1BA,U;;;;;WACa,E;;8EAEbC,M;;;;;;;iFACY,SAAA,OAAA,GAAA;AAAA,UAAA,GAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBACME,MAAM,CAANA,GAAAA,CADN,OACMA,CADN;;AAAA,iBAAA,CAAA;AACND,cAAAA,GADM,GAAA,QAAA,CAAA,IACNA;AADM,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBAESA,GAAG,CAFZ,IAAA;;AAAA,iBAAA,CAAA;AAEZ,cAAA,KAAI,CAFQ,OAEZ,GAFY,QAAA,CAAA,IAEZ;;AAFY,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,OAAA,CAAA;;;;AAMd,eAAA,SAAA","sourcesContent":["import { observable, action } from 'mobx';\r\nimport client from '../../lib/client';\r\n\r\nclass TestStore {\r\n\t@observable test: string = 'mobx teststore';\r\n\t@observable\r\n\tapiData:any = [];\r\n\r\n\t@action\r\n\tgetApiData = async() =>{\r\n\t\tconst res = await client.get('/user');\r\n\t\tthis.apiData = await res.data;\r\n\t}\r\n}\r\n\r\nexport default TestStore;\r\n"]},"metadata":{},"sourceType":"module"}
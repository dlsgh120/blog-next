{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nimport { observable, action } from 'mobx';\nimport client from '../../lib/client';\nvar TestStore = (_class = (_temp = function TestStore() {\n  _classCallCheck(this, TestStore);\n\n  _initializerDefineProperty(this, \"test\", _descriptor, this);\n\n  _initializerDefineProperty(this, \"apiData\", _descriptor2, this);\n\n  _initializerDefineProperty(this, \"getApiData\", _descriptor3, this);\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"test\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 'mobx teststore';\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"apiData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"getApiData\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return client.get('/');\n\n            case 2:\n              res = _context.sent;\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  }\n})), _class);\nexport default TestStore;","map":{"version":3,"sources":["D:/workspace/blog/stores/test/testStore.ts"],"names":["observable","action","client","TestStore","get","res"],"mappings":";;;;;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,QAAmC,MAAnC;AACA,OAAOC,MAAP,MAAmB,kBAAnB;IAEMC,S;;;;;;;;+EACJH,U;;;;;WAA0B,gB;;2EAC1BA,U;;;;;WACa,E;;8EAEbC,M;;;;;iFACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACMC,MAAM,CAACE,GAAP,CAAW,GAAX,CADN;;AAAA;AACNC,cAAAA,GADM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;AAKd,eAAeF,SAAf","sourcesContent":["import { observable, action } from 'mobx';\r\nimport client from '../../lib/client';\r\n\r\nclass TestStore {\r\n\t@observable test: string = 'mobx teststore';\r\n\t@observable\r\n\tapiData:any = [];\r\n\r\n\t@action\r\n\tgetApiData = async() =>{\r\n\t\tconst res = await client.get('/')\r\n\t}\r\n}\r\n\r\nexport default TestStore;\r\n"]},"metadata":{},"sourceType":"module"}
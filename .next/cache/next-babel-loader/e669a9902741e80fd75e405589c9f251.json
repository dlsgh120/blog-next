{"ast":null,"code":"var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { action, observable, computed, makeObservable } from 'mobx';\nimport BaseStore from '../BaseStore';\nimport qs from 'qs';\nimport client from '../../lib/client';\nlet UserStore = (_class = (_temp = class UserStore extends BaseStore {\n  constructor() {\n    super();\n\n    _initializerDefineProperty(this, \"_checkIdStatus\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"initUserInfo\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"checkId\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"createUser\", _descriptor4, this);\n\n    makeObservable(this);\n  }\n\n  get checkIdStatus() {\n    return this._checkIdStatus;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_checkIdStatus\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _applyDecoratedDescriptor(_class.prototype, \"checkIdStatus\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"checkIdStatus\"), _class.prototype), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"initUserInfo\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this._checkIdStatus = undefined;\n    };\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"checkId\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async email => {\n      this._checkIdStatus = undefined;\n\n      this._init('CHECK_EMAIL_COMPLETE');\n\n      try {\n        const res = await client.post('/api/users/checkId', qs.stringify({\n          email: email\n        }));\n        this._checkIdStatus = await res.data;\n        this._success[\"CHECK_EMAIL_COMPLETE\"] = true;\n      } catch (e) {\n        this._failure[\"CHECK_EMAIL_COMPLETE\"] = [true, e];\n      } finally {\n        this._pending[\"CHECK_EMAIL_COMPLETE\"] = false;\n      }\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"createUser\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async (email, password, name, phone) => {};\n  }\n})), _class);\nexport default UserStore;","map":{"version":3,"sources":["D:/workspace/blog/stores/users/userStore.ts"],"names":["action","observable","computed","makeObservable","BaseStore","qs","client","UserStore","constructor","checkIdStatus","_checkIdStatus","undefined","email","_init","res","post","stringify","data","_success","e","_failure","_pending","password","name","phone"],"mappings":";;;;;;;;AAAA,SAAQA,MAAR,EAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,cAAtC,QAA2D,MAA3D;AAEA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,MAAP,MAAmB,kBAAnB;IAEMC,S,sBAAN,MAAMA,SAAN,SAAwBH,SAAxB,CAAiC;AAC7BI,EAAAA,WAAW,GAAG;AAChB;;AADgB;;AAAA;;AAAA;;AAAA;;AAEhBL,IAAAA,cAAc,CAAC,IAAD,CAAd;AACG;;AAKD,MACIM,aADJ,GACmB;AACf,WAAO,KAAKC,cAAZ;AACH;;AAZ4B,C,wFAM5BT,U;;;;;kEAGAC,Q,sKAKAF,M;;;;;WACc,MAAK;AAChB,WAAKU,cAAL,GAAsBC,SAAtB;AACH,K;;2EAEAX,M;;;;;WACS,MAAMY,KAAN,IAAsB;AAC5B,WAAKF,cAAL,GAAsBC,SAAtB;;AACA,WAAKE,KAAL,CAAW,sBAAX;;AACA,UAAG;AACC,cAAMC,GAAG,GAAG,MAAMR,MAAM,CAACS,IAAP,CAAY,oBAAZ,EAAkCV,EAAE,CAACW,SAAH,CAAa;AAACJ,UAAAA,KAAK,EAACA;AAAP,SAAb,CAAlC,CAAlB;AACA,aAAKF,cAAL,GAAsB,MAAMI,GAAG,CAACG,IAAhC;AACA,aAAKC,QAAL,CAAc,sBAAd,IAAwC,IAAxC;AACH,OAJD,CAIE,OAAMC,CAAN,EAAQ;AACN,aAAKC,QAAL,CAAc,sBAAd,IAAwC,CAAC,IAAD,EAAOD,CAAP,CAAxC;AACH,OAND,SAMS;AACL,aAAKE,QAAL,CAAc,sBAAd,IAAwC,KAAxC;AACH;AACJ,K;;8EAEArB,M;;;;;WACY,OAAMY,KAAN,EAAoBU,QAApB,EAAqCC,IAArC,EAAkDC,KAAlD,KAAkE,CAE9E,C;;;AAGL,eAAejB,SAAf","sourcesContent":["import {action, observable, computed, makeObservable} from 'mobx';\r\nimport {checkIdStatus} from './types';\r\nimport BaseStore from '../BaseStore';\r\nimport qs from 'qs';\r\nimport client from '../../lib/client';\r\n\r\nclass UserStore extends BaseStore{\r\n    constructor() {\r\n\t\tsuper();\r\n\t\tmakeObservable(this);\r\n    }\r\n    \r\n    @observable\r\n    _checkIdStatus?:checkIdStatus;\r\n\r\n    @computed\r\n    get checkIdStatus(){\r\n        return this._checkIdStatus;\r\n    }\r\n\r\n    @action\r\n    initUserInfo = () =>{\r\n        this._checkIdStatus = undefined;\r\n    }\r\n\r\n    @action\r\n    checkId = async(email:string) =>{\r\n        this._checkIdStatus = undefined;\r\n        this._init('CHECK_EMAIL_COMPLETE');\r\n        try{\r\n            const res = await client.post('/api/users/checkId', qs.stringify({email:email}));\r\n            this._checkIdStatus = await res.data;\r\n            this._success[\"CHECK_EMAIL_COMPLETE\"] = true;\r\n        } catch(e){\r\n            this._failure[\"CHECK_EMAIL_COMPLETE\"] = [true, e];\r\n        } finally{\r\n            this._pending[\"CHECK_EMAIL_COMPLETE\"] = false;\r\n        }\r\n    }\r\n\r\n    @action\r\n    createUser = async(email:string, password:string, name:string, phone:string) =>{\r\n\r\n    }\r\n}\r\n\r\nexport default UserStore;"]},"metadata":{},"sourceType":"module"}